from freq_factor import freq_factor
import numpy as np

def diff_eqs_freqfactor(y0, t, value):
    """
    Defines the differential equations system to describe the change rate of electrons in the valence and conduction band of LiF:Mg,Ti. The equations considered are (3.3)-(3.6), which are:
    
        (3.3) dn_c/dt = G - sum_i dn_i/dt  +  (sum_R,NR A_mn_i * m_i) * n_c  
        (3.4) dn_i/dt = -p_i * n_i + A_i * (N_i - n_i) * n_c
        (3.5) dm_j/dt = -hp_j * m_j + A_j * (M_j - m_j) * n_v - jA_mn * m_j * n_c
        (3.6) dn_v/dt = G - sum_R,NR - p_h_i * m_i + A_h_i * (M_i - m_i) * n_c

    * G: electron-hole pairs generated by the radiation [cm-3 s-1]
    * n_c: electron density in the conduction band [cm-3]
    * n_v: electron density in the valence band [cm-3]
    * n_i: electron density in trap i [cm-3]
    * m_j : hole density in the recombination center j [cm-3]
    * N_i: total accesible positions for trap i [cm-3]
    * M_j : total density of ???
    * p_i: electron release probability factor for trap i [s-1]
    * hp_j : hole release probability factor for recombination center j [s-1]
    * A_i: electron trapping probability factor for trap i [cm3 s-1]
    * jA_mn: recombination probability factor for recombination center j [cm3 s-1]
    
    ### In this case, the frequency factor is defined with:
                s = nu * K * exp(Delta S / kB)
    
    Args:
        y0: initial condictions vector
        t: time vector
        value: parameters object
    """
    # Unpacking of variables
    n_I, n_II, n_III, n_IV, n_V, n_s, m_R, m_NR, n_c, n_v = y0
    
    # Definition of temperature change with the heating rate [K]
    temp_heating = 273.15 + value.T_C + value.hr * t
    
    # Computation of electron release probabilities
    p_I = freq_factor(temp_heating, value) * np.exp(-value.E_I / (value.kB * temp_heating))
    p_II = freq_factor(temp_heating, value) * np.exp(-value.E_II / (value.kB * temp_heating))
    p_III = freq_factor(temp_heating, value) * np.exp(-value.E_III / (value.kB * temp_heating))
    p_IV = freq_factor(temp_heating, value) * np.exp(-value.E_IV / (value.kB * temp_heating))
    p_V = freq_factor(temp_heating, value) * np.exp(-value.E_V / (value.kB * temp_heating))
    p_s = freq_factor(temp_heating, value) * np.exp(-value.E_s / (value.kB * temp_heating))
    
    p_R_h = freq_factor(temp_heating, value) * np.exp(-value.E_R_h / (value.kB * temp_heating))
    p_NR_h = freq_factor(temp_heating, value) * np.exp(-value.E_NR_h / (value.kB * temp_heating))
 
    # Equations (3.4) and (3.5) for each trap/recombination center
    dn_Idt = - p_I * n_I + value.A_I * (value.N_I - n_I) * n_c
    dn_IIdt = - p_II * n_II + value.A_II * (value.N_II - n_II) * n_c
    dn_IIIdt = - p_III * n_III + value.A_III * (value.N_III - n_III) * n_c
    dn_IVdt = - p_IV * n_IV + value.A_IV * (value.N_IV - n_IV) * n_c
    dn_Vdt = - p_V * n_V + value.A_V * (value.N_V - n_V) * n_c
    dn_sdt = - p_s * n_s + value.A_s * (value.N_s - n_s) * n_c
    
    dm_Rdt = - m_R * value.A_mn_R * n_c + value.A_R * (value.M_R - m_R) * n_v - p_R_h * m_R
    dm_NRdt = - m_NR * value.A_mn_NR * n_c + value.A_NR * (value.M_NR - m_NR) * n_v - p_NR_h * m_NR
    
    # Equations (3.3) and (3.6)
    dn_cdt = value.G - (dn_Idt + dn_IIdt + dn_IIIdt + dn_IVdt + dn_Vdt + dn_sdt) - value.A_mn_R * m_R * n_c - value.A_mn_NR * m_NR * n_c
    dn_vdt = value.G + (p_R_h * m_R + p_NR_h * m_NR) - (value.A_R * (value.M_R - m_R) + value.A_NR * (value.M_NR - m_NR)) * n_v

    return dn_Idt, dn_IIdt, dn_IIIdt, dn_IVdt, dn_Vdt, dn_sdt, dm_Rdt, dm_NRdt, dn_cdt, dn_vdt
    